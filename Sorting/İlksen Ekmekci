
#include <stdio.h>
#include <string.h>
#include <time.h>
void insertionSort(int arr[], int n)
{
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}
void insertionSortchar(char arr[], int n)
{
    int i, j;
    char key;
    for(i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;
        while(j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}
void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void swapChar(char *xp, char *yp)
{
    char temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void selectionSort(int arr[], int n)
{
    int i, j, min;
    for (i = 0; i < n-1; i++)
    {
        min = i;
        for (j = i+1; j < n; j++)
          if (arr[j] < arr[min])
            min = j;
        swap(&arr[min], &arr[i]);
    }
}
void selectionSortchar(char arr[], int n)
{
    int i, j;
    char min;
    for (i = 0; i < n-1; i++)
    {
        min = i;
        for (j = i+1; j < n; j++)
          if (arr[j] < arr[min])
            min = j;
        swapChar(&arr[min], &arr[i]);
    }
}
void bubbleSort(int arr[], int n)
{
   int i, j;
   for (i = 0; i < n-1; i++)
       for (j = 0; j < n-i-1; j++)
           if (arr[j] > arr[j+1])
              swap(&arr[j], &arr[j+1]);
}

void bubbleSortchar(char arr[], int n)
{
   int i, j;
   for (i = 0; i < n-1; i++)
       for (j = 0; j < n-i-1; j++)
           if (arr[j] > arr[j+1])
              swapChar(&arr[j], &arr[j+1]);
}
void merge(int arr[], int l, int m, int r)
{
    int i, j, k, n1, n2;
    n1 = m - l + 1;
    n2 = r - m;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = 0;
    j = 0;
    k = l;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
void mergeSort(int arr[], int l, int r)
{
    if (l < r) {
        int m = l + (r - l) / 2;

        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        merge(arr, l, m, r);
    }
}
void mergeName(char arr[], int l, int m, int r)
{
    int i, j, k, n1, n2;
    n1 = m - l + 1;
    n2 = r - m;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = 0;
    j = 0;
    k = l;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
void mergeSortchar(char arr[], int l, int r)
{
    if (l < r) {
        int m = l + (r - l) / 2;

        mergeSortchar(arr, l, m);
        mergeSortchar(arr, m + 1, r);

        mergeName(arr, l, m, r);
    }
}
void printArray(int arr[], int n)
{
    int i;
    for (i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}
int main() {
    clock_t begin,end;
    int no[] = { 2, 0, 1, 7, 5, 5, 6, 0, 2, 4 };
    char name[] = "ilksenekmekci";
    int n = sizeof(no) / sizeof(no[0]);
    int t;
    t = clock();
    insertionSort(no, 10);
    t = clock() - t;
    printArray(no, 10);
    printf("insertionsort time taken: %f\n", ((double)t) / CLOCKS_PER_SEC);
    insertionSortchar(name, 13);
    end = clock();
    t = clock() - t;
    printf("%s\n", name);
    printf("insertioncharsort time takem: %f\n", ((double)t) / CLOCKS_PER_SEC);
    printf("\n");
    selectionSort(no, n);
    printArray(no, n);
    printf("selectionsort time taken: %f\n", ((double)t) / CLOCKS_PER_SEC);
    selectionSortchar(name, 13);
    printf("%s\n", name);
    printf("selectioncharsort time taken: %f\n", ((double)t) / CLOCKS_PER_SEC);
    printf("\n");
    bubbleSort(no, n);
    printArray(no, n);
    printf("bubblesort time taken: %f\n", ((double)t) / CLOCKS_PER_SEC);
    bubbleSortchar(name, 13);
    printf("%s\n", name);
    printf("bubblecharsort time taken: %f\n", ((double)t) / CLOCKS_PER_SEC);
    printf("\n");
    mergeSort(no, 0, n - 1);
    t = clock() - t;
    printArray(no, n);
    printf("mergesort time taken: %f\n", ((double)t) / CLOCKS_PER_SEC);
    mergeSortchar(name, 0, 13 - 1);
    t = clock() - t;
    printf("%s\n", name);
    printf("mergecharsort time taken: %f\n", ((double)t) / CLOCKS_PER_SEC);
    return 0;
}
